on: [push, pull_request, workflow_dispatch]

env:
  TOOLS_URL: https://github.com/mmatyas/pegasus-frontend/releases/download/alpha1
  QT_VERSION: qt5156
  QT_VERSION_PRETTY: "5.15.6"
  SDL_VERSION: "2.0.20"


jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "SteamDeck", artifact: "SteamDeck.tar.xz",
            os: ubuntu-20.04,
            build_type: "Release"
          }
    env:
      QT_TARGET: x11-static
      SDL_TARGET: x11-bionic
    steps:
      - name: GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        if: matrix.os == 'ubuntu-20.04'
      - name: APT deps
        run: sudo apt-get update && sudo apt-get install -y
          g++-10
          libasound-dev
          libgl1-mesa-dev
          libgstreamer-plugins-base1.0-dev
          libpulse-dev
          libudev-dev
          libxcb-glx0-dev
          libxcb-icccm4-dev
          libxcb-image0-dev
          libxcb-keysyms1-dev
          libxcb-randr0-dev
          libxcb-render-util0-dev
          libxcb-shape0-dev
          libxcb-sync-dev
          libxcb-util-dev
          libxcb-xfixes0-dev
          libxcb-xinerama0-dev
          libxi-dev
          libxkbcommon-dev
          libxkbcommon-x11-dev
          libzstd-dev
          ninja-build
          xvfb
      - name: Get Qt
        run: |
          curl -L "${TOOLS_URL}/${QT_VERSION}_${QT_TARGET}.tar.xz" | sudo tar xJf - -C /opt/
          curl -L "${TOOLS_URL}/SDL2-${SDL_VERSION}_${SDL_TARGET}.tar.xz" | tar xJf - -C /opt/
          curl -L "${TOOLS_URL}/apng_patched_headers.tar.xz" | sudo tar xJf - -C "/opt/${QT_VERSION}_${QT_TARGET}/include/"
          /opt/${QT_VERSION}_${QT_TARGET}/bin/qmake --version
      - name: Get CMake
        run: |
          curl -L "${TOOLS_URL}/cmake-linux-x64.tar.xz" | sudo tar xJf - -C /opt/
          /opt/cmake/bin/cmake --version

      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 200
      - run: git fetch --tags -f
      - run: mkdir build

      - name: Configure
        working-directory: build
        env:
          CC: gcc-10
          CXX: g++-10
        run: /opt/cmake/bin/cmake ..
          -DCMAKE_PREFIX_PATH="/opt/${QT_VERSION}_${QT_TARGET};/opt/SDL2-${SDL_VERSION}"
          -G Ninja
          -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always
          -DCMAKE_INSTALL_PREFIX=/usr/
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
          -DPEGASUS_ENABLE_APNG=ON
          -DPEGASUS_STATIC_CXX=ON
      - name: Build
        working-directory: build
        run: ninja

      - name: Test
        working-directory: build
        run: xvfb-run -a ctest --rerun-failed --output-on-

      - name: Install Strip
        run: /opt/cmake/bin/cmake --install build --prefix instdir --strip

      - name: Pack
        working-directory: instdir
        run: /opt/cmake/bin/cmake -E tar cJfv ../${{ matrix.config.artifact }} .

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "SteamDeck", artifact: "SteamDeck.tar.xz",
            os: ubuntu-latest
          }
    needs: release

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.config.artifact }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: Frontloader-${{ github.ref }}-${{ matrix.config.artifact }}
          asset_content_type: application/x-gtar