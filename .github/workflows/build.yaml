on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    container:
      image: ${{ matrix.config.container }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "SteamDeck GCC Release", artifact: "SteamDeck-Release.tar.xz",
            os: ubuntu-22.04, container: "ghcr.io/steamdeckhomebrew/holo-base:latest",
            build_type: "Release", deps:
                                      "sudo pacman -S --noconfirm --disable-download-timeout
                                        nodejs
                                        git
                                        cmake
                                        ninja
                                        xorg-server-xvfb
                                        qt5
                                        sdl2"
          }
          - {
            name: "SteamDeck GCC Debug", artifact: "SteamDeck-Debug.tar.xz",
            os: ubuntu-22.04, container: "ghcr.io/steamdeckhomebrew/holo-base:latest",
            build_type: "Debug", deps:
                                    "sudo pacman -S --noconfirm --disable-download-timeout
                                      nodejs
                                      git
                                      cmake
                                      ninja
                                      xorg-server-xvfb
                                      qt5
                                      sdl2"
          }
    steps:
      - name: Get deps
        run: ${{ matrix.config.deps }}
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 200
      - name: Build project
        uses: nicledomaS/cmake_build_action@v1.4
        with:
          submodule_update: OFF
          cmake_args: -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }};-DCMAKE_CXX_FLAGS=-fdiagnostics-color=always;-DPEGASUS_ENABLE_APNG=OFF;-DPEGASUS_STATIC_CXX=ON;-DPEGASUS_INSTALLDIR=/__w/Frontloader/Frontloader/install;-GNinja
#      - name: Test
#        working-directory: build
#        run: xvfb-run -a ctest --output-on-failure -C ${{ matrix.config.build_type }} --parallel 2
      - name: Install
        working-directory: build
        run: ninja install
      - name: Pack
        working-directory: install
        run: tar cJfv ../${{ matrix.config.artifact }} .


      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 200
      - name: Gen Release Name
        run: |
          if [[ "$REF" == *"tags/v"* ]]
          then
              echo "release_name=Release ${{ github.ref_name }}" >> $GITHUB_ENV
              echo "release_body=$(git tag -l -n999 ${{ github.ref_name }})" >> $GITHUB_ENV
              echo "tag_name=${{ github.ref_name }}" >> $GITHUB_ENV
              echo "prerelease=false" >> $GITHUB_ENV
          else
              echo "release_name=Canary $(git rev-parse --short ${{ github.sha }} )" >> $GITHUB_ENV
              echo "release_body=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
              echo "tag_name=$(git rev-parse --short ${{ github.sha }} )" >> $GITHUB_ENV
              echo "prerelease=true" >> $GITHUB_ENV
          fi
        env:
          REF: ${{ github.ref }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: ${{ env.release_name }}
          body: ${{ env.release_body }}
          draft: false
          prerelease: ${{ env.prerelease }}

      - name: Store Release url
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "SteamDeck GCC Release", artifact: "SteamDeck-Release.tar.xz",
            os: ubuntu-20.04
          }
          - {
            name: "SteamDeck GCC Debug", artifact: "SteamDeck-Debug.tar.xz",
            os: ubuntu-20.04
          }
          - {
            name: "Installer", artifact: "install_frontloader.desktop",
            os: ubuntu-20.04
          }
    needs: release

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 200
      - name: Gen Release Version
        run: |
          if [[ "$REF" == *"tags/v"* ]]
          then
              echo "release_version=${{ github.ref_name }}" >> $GITHUB_ENV
          else
              echo "release_version=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
          fi
        env:
          REF: ${{ github.ref }}
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.config.artifact }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./
      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: Frontloader-${{ env.release_version }}-${{ matrix.config.artifact }}
          asset_content_type: application/x-gtar